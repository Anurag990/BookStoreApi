package com.Anurag.project.Api.BookStore.Service;import com.Anurag.project.Api.BookStore.Dto.BookDTO;import com.Anurag.project.Api.BookStore.Entites.Book;import com.Anurag.project.Api.BookStore.Repositries.BookRepository;import org.modelmapper.ModelMapper;import org.springframework.stereotype.Service;import java.util.List;import java.util.Optional;import java.util.stream.Collectors;@Servicepublic class BookService {    private final BookRepository bookRepository;    private final ModelMapper modelMapper;    BookService(BookRepository bookRepository,ModelMapper modelMapper)    {        this.bookRepository=bookRepository;        this.modelMapper=modelMapper;    }    public BookDTO createNewBook(BookDTO inputBook) {        Book toSaveBook = modelMapper.map(inputBook,Book.class);        Book savedBook = bookRepository.save(toSaveBook);        return modelMapper.map(savedBook, BookDTO.class);    }    public Optional<BookDTO> getBookById(Integer bookId) {       Optional<Book> bookEntity = bookRepository.findById(bookId);       return bookEntity.map((element) -> modelMapper.map(element, BookDTO.class));    }    public List<BookDTO> getAllBooks() {        List<Book> BookEntities=bookRepository.findAll();        return BookEntities.stream().map((element) -> modelMapper.map(element, BookDTO.class)).collect(Collectors.toList());    }    public BookDTO updateBookById(Integer bookId, BookDTO bookDTO) {        Book bookEntity = modelMapper.map(bookDTO, Book.class);        bookEntity.setId(bookId);        Book savedBook = bookRepository.save(bookEntity);        return modelMapper.map(savedBook, BookDTO.class);    }    public boolean deleteBookById(Integer bookId) {        boolean exist = bookRepository.existsById(bookId);        if(!exist)        {            return false;        }        bookRepository.deleteById(bookId);        return true;    }}