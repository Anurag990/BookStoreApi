package com.Anurag.project.Api.BookStore.Controller;import com.Anurag.project.Api.BookStore.Dto.BookDTO;import com.Anurag.project.Api.BookStore.Service.BookService;import jakarta.validation.Valid;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.List;import java.util.Optional;@RestController@RequestMapping(path = "Books")public class BookController {    private final BookService bookService;    BookController(BookService bookService)    {        this.bookService = bookService;    }    @GetMapping(path = "/{BookId}")    public ResponseEntity<BookDTO> getBookById(@PathVariable Integer BookId)    {        Optional<BookDTO> bookDTO =  bookService.getBookById(BookId);        return bookDTO.map(bookDTO1 -> ResponseEntity.ok(bookDTO1))                                     .orElse(ResponseEntity.notFound().build());    }    @PostMapping    public ResponseEntity<BookDTO> createNewBook(@RequestBody @Valid BookDTO inputBook)    {        BookDTO savedBook = bookService.createNewBook(inputBook);        return new ResponseEntity<>(savedBook, HttpStatus.CREATED);    }    @GetMapping    public ResponseEntity<List<BookDTO> >getAllBooks()    {        return ResponseEntity.ok(bookService.getAllBooks());    }    @PutMapping(path = "/{BookId}")    public ResponseEntity<BookDTO> updateBookById(@RequestBody BookDTO updatedBook,@PathVariable Integer BookId)    {        BookDTO bookDTO = bookService.updateBookById(BookId,updatedBook);        if(bookDTO == null)        {            return ResponseEntity.notFound().build();        }        return ResponseEntity.ok(bookDTO);    }    @DeleteMapping(path = "/{BookId}")    public ResponseEntity<Boolean> deleteBookById(@PathVariable Integer BookId)    {        boolean gotDeleted =  bookService.deleteBookById(BookId);        if(gotDeleted)        {            return ResponseEntity.ok(true);        }        return ResponseEntity.notFound().build();    }}